Index: templates/navbar.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{% load cart_template_tags %}\r\n{% load static %}\r\n<!--Navbar -->\r\n\r\n<nav class=\"mb-1 navbar fixed-top navbar-expand-lg navbar-light white scrolling-navbar\">\r\n      <div class=\"container\">\r\n    <a class=\"navbar-brand\" href=\"/\"><img src=\"{% static 'img/1.jpg' %}\" width=\"100\"/></a>\r\n    <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent-4\"\r\n      aria-controls=\"navbarSupportedContent-4\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span class=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent-4\">\r\n\r\n      <ul class=\"navbar-nav ml-auto\">\r\n        {% if request.user.is_authenticated %}\r\n        <li class=\"nav-item\">\r\n          <a class=\"nav-link\" href=\"\">\r\n            <span class=\"badge red z-depth-1 mr-1\"> {{ request.user|cart_item_count }} </span>\r\n            <i class=\"fas fa-plane-departure\"></i>Upcoming Trips</a>\r\n        </li>\r\n        <li class=\"nav-item dropdown\">\r\n          <a class=\"nav-link dropdown-toggle\" id=\"navbarDropdownMenuLink-4\" data-toggle=\"dropdown\"\r\n            aria-haspopup=\"true\" aria-expanded=\"false\">\r\n            <i class=\"fas fa-user\"></i> Hi {{ user.get_username|title }}! </a>\r\n          <div class=\"dropdown-menu dropdown-menu-right dropdown-info\" aria-labelledby=\"navbarDropdownMenuLink-4\">\r\n            <a class=\"dropdown-item\" href=\"\">Wishlist</a>\r\n            <a class=\"dropdown-item\" href=\"\">My account</a>\r\n            <a class=\"dropdown-item\" href=\"{% url 'account_logout' %}\">Log out</a>\r\n          </div>\r\n        </li>\r\n        {% else %}\r\n          <li class=\"nav-item\">\r\n            <a class=\"nav-link waves-effect\" href=\"{% url 'account_login' %}\">\r\n              <span class=\"clearfix d-none d-sm-inline-block\"> Login </span>\r\n            </a>\r\n          </li>\r\n          <li class=\"nav-item\">\r\n            <a class=\"nav-link waves-effect\" href=\"{% url 'account_signup' %}\">\r\n              <span class=\"clearfix d-none d-sm-inline-block\"> Signup </span>\r\n            </a>\r\n          </li>\r\n        {% endif %}\r\n      </ul></div>\r\n    </div>\r\n</nav>\r\n<!--/.Navbar -->\r\n\r\n\r\n\r\n<!--<nav class=\"navbar fixed-top navbar-expand-lg navbar-light white scrolling-navbar\">-->\r\n<!--    <div class=\"container\">-->\r\n\r\n<!--      &lt;!&ndash; Brand &ndash;&gt;-->\r\n<!--      <a class=\"navbar-brand waves-effect\" href=\"/\">-->\r\n<!--        <strong class=\"blue-text\">Mango!</strong>-->\r\n<!--      </a>-->\r\n\r\n<!--      &lt;!&ndash; Collapse &ndash;&gt;-->\r\n<!--      <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\"-->\r\n<!--        aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">-->\r\n<!--        <span class=\"navbar-toggler-icon\"></span>-->\r\n<!--      </button>-->\r\n\r\n<!--      &lt;!&ndash; Links &ndash;&gt;-->\r\n<!--      <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">-->\r\n\r\n<!--        &lt;!&ndash; Left &ndash;&gt;-->\r\n<!--        <ul class=\"navbar-nav mr-auto\">-->\r\n<!--          {% comment %} <li class=\"nav-item active\">-->\r\n<!--            <a class=\"nav-link waves-effect\" href=\"/\">Home-->\r\n<!--              <span class=\"sr-only\">(current)</span>-->\r\n<!--            </a>-->\r\n<!--          </li>-->\r\n<!--          <li class=\"nav-item\">-->\r\n<!--            <a class=\"nav-link waves-effect\" href=\"/checkout\">-->\r\n<!--            Checkout</a>-->\r\n<!--          </li> {% endcomment %}-->\r\n<!--        </ul>-->\r\n\r\n<!--        &lt;!&ndash; Right &ndash;&gt;-->\r\n<!--        <ul class=\"navbar-nav nav-flex-icons\">-->\r\n<!--          {% if request.user.is_authenticated %}-->\r\n<!--          <li class=\"nav-item\">-->\r\n<!--            <a href=\"{% url 'core:order-summary' %}\" class=\"nav-link waves-effect\">-->\r\n<!--              <span class=\"badge red z-depth-1 mr-1\"> {{ request.user|cart_item_count }} </span>-->\r\n<!--              <i class=\"fas fa-shopping-cart\"></i>-->\r\n<!--              <span class=\"clearfix d-none d-sm-inline-block\"> Cart </span>-->\r\n<!--            </a>-->\r\n<!--          </li>-->\r\n<!--          <li class=\"nav-item\">-->\r\n<!--            <a href=\"{% url 'core:wishlist-summary' %}\" class=\"nav-link waves-effect\">-->\r\n<!--              <span class=\"badge blue z-depth-1 mr-1\"> {{ request.user|wishlist_item_count }} </span>-->\r\n<!--              <i class=\"fas fa-heart\"></i>-->\r\n<!--              <span class=\"clearfix d-none d-sm-inline-block\"> Wishlist </span>-->\r\n<!--            </a>-->\r\n<!--          </li>-->\r\n<!--          <li class=\"nav-item\">-->\r\n<!--            <a class=\"nav-link waves-effect\" href=\"{% url 'account_logout' %}\">-->\r\n<!--              <span class=\"clearfix d-none d-sm-inline-block\"> Logout </span>-->\r\n<!--            </a>-->\r\n<!--          </li>-->\r\n<!--          {% else %}-->\r\n<!--          <li class=\"nav-item\">-->\r\n<!--            <a class=\"nav-link waves-effect\" href=\"{% url 'account_login' %}\">-->\r\n<!--              <span class=\"clearfix d-none d-sm-inline-block\"> Login </span>-->\r\n<!--            </a>-->\r\n<!--          </li>-->\r\n<!--          <li class=\"nav-item\">-->\r\n<!--            <a class=\"nav-link waves-effect\" href=\"{% url 'account_signup' %}\">-->\r\n<!--              <span class=\"clearfix d-none d-sm-inline-block\"> Signup </span>-->\r\n<!--            </a>-->\r\n<!--          </li>-->\r\n<!--          {% endif %}-->\r\n<!--        </ul>-->\r\n<!--      </div>-->\r\n\r\n<!--    </div>-->\r\n<!--  </nav>-->
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- templates/navbar.html	(revision b78eb8fdb8c7921bb4816225341ed32314fba6f6)
+++ templates/navbar.html	(date 1607437475951)
@@ -23,7 +23,7 @@
             aria-haspopup="true" aria-expanded="false">
             <i class="fas fa-user"></i> Hi {{ user.get_username|title }}! </a>
           <div class="dropdown-menu dropdown-menu-right dropdown-info" aria-labelledby="navbarDropdownMenuLink-4">
-            <a class="dropdown-item" href="">Wishlist</a>
+            <a class="dropdown-item" href="">Favourites</a>
             <a class="dropdown-item" href="">My account</a>
             <a class="dropdown-item" href="{% url 'account_logout' %}">Log out</a>
           </div>
Index: scraping.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># from requests import get\r\n# from bs4 import BeautifulSoup\r\n#\r\n# URL = \"https://www.amazon.in/Canon-1500D-24-1MP-Digital-55-250mm/dp/B07BRR59DT/ref=bmx_4/257-7494594-7287510?_encoding=UTF8&pd_rd_i=B07BRR59DT&pd_rd_r=768617e6-65e5-499f-bd98-b4952b98763e&pd_rd_w=0PoEQ&pd_rd_wg=ElpVj&pf_rd_p=08abe11d-4ee5-46ca-8471-7bf18c53fc91&pf_rd_r=5ZF6D4K9PY4H205YRBCH&psc=1&refRID=5ZF6D4K9PY4H205YRBCH\"\r\n# headers = {\"User-Agent\":\"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0\", \"Accept-Encoding\":\"gzip, deflate\", \"Accept\":\"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\", \"DNT\":\"1\",\"Connection\":\"close\", \"Upgrade-Insecure-Requests\":\"1\"}\r\n# response = get(URL,headers=headers)\r\n# soup = BeautifulSoup(response.content, \"lxml\")\r\n#\r\n# # try:\r\n# c = soup.find(id='priceblock_ourprice')\r\n#\r\n# print(c)\r\nimport pandas as pd\r\nimport sqlite3\r\n\r\n# Read sqlite query results into a pandas DataFrame\r\ncon = sqlite3.connect(\"db.sqlite3\")\r\ndf = pd.read_sql_query('''SELECT name FROM sqlite_master WHERE type='table';''', con)\r\ndf1=pd.read_sql_query(\"SELECT * FROM core_order \", con)\r\n\r\n# Verify that result of SQL query is stored in the dataframe\r\nprint(df1)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- scraping.py	(revision b78eb8fdb8c7921bb4816225341ed32314fba6f6)
+++ scraping.py	(date 1608716544096)
@@ -19,4 +19,5 @@
 df1=pd.read_sql_query("SELECT * FROM core_order ", con)
 
 # Verify that result of SQL query is stored in the dataframe
-print(df1)
\ No newline at end of file
+print(df1)
+
Index: templates/home.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\n\r\n-{% extends \"base.html\" %}\r\n\r\n{% block content %}\r\n<!-- jQuery !-->\r\n\r\n<!-- jQuery UI !-->\r\n\r\n  <main>\r\n    <div class=\"container\">\r\n\r\n      <!--/.Navbar-->\r\n<!--Carousel Wrapper-->\r\n<div id=\"carousel-example-2\" class=\"carousel slide carousel-fade\" data-ride=\"carousel\">\r\n  <!--Indicators-->\r\n  <ol class=\"carousel-indicators\">\r\n    <li data-target=\"#carousel-example-2\" data-slide-to=\"0\" class=\"active\"></li>\r\n    <li data-target=\"#carousel-example-2\" data-slide-to=\"1\"></li>\r\n    <li data-target=\"#carousel-example-2\" data-slide-to=\"2\"></li>\r\n  </ol>\r\n  <!--/.Indicators-->\r\n  <!--Slides-->\r\n  <div class=\"carousel-inner\" role=\"listbox\">\r\n    <div class=\"carousel-item active\">\r\n      <div class=\"view\">\r\n        <img class=\"d-block w-150\" src=\"https://mdbootstrap.com/img/Photos/Slides/img%20(15).jpg\"\r\n          alt=\"First slide\">\r\n        <div class=\"mask rgba-black-slight\"></div>\r\n      </div>\r\n      <div class=\"carousel-caption\">\r\n        <h3 class=\"h3-responsive\">Escapcasita</h3>\r\n        <p>Find Your Escape!</p>\r\n      </div>\r\n    </div>\r\n    <div class=\"carousel-item\">\r\n      <!--Mask color-->\r\n      <div class=\"view\">\r\n        <img class=\"d-block w-150\" src=\"https://mdbootstrap.com/img/Photos/Slides/img%20(17).jpg\"\r\n          alt=\"Second slide\">\r\n        <div class=\"mask rgba-black-strong\"></div>\r\n      </div>\r\n      <div class=\"carousel-caption\">\r\n        <h3 class=\"h3-responsive\">Book Your Stay with us</h3>\r\n        <p>Experience the Best Luxurious Comfort!</p>\r\n      </div>\r\n    </div>\r\n    <div class=\"carousel-item\">\r\n      <!--Mask color-->\r\n      <div class=\"view\">\r\n        <img class=\"d-block w-150\" src=\"https://mdbootstrap.com/img/Photos/Slides/img%20(18).jpg\"\r\n          alt=\"Third slide\">\r\n        <div class=\"mask rgba-black-light\"></div>\r\n      </div>\r\n      <div class=\"carousel-caption\">\r\n        <h3 class=\"h3-responsive\">Explore the World</h3>\r\n        <p>Indulge Your Senses!</p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <!--/.Slides-->\r\n  <!--Controls-->\r\n  <a class=\"carousel-control-prev\" href=\"#carousel-example-2\" role=\"button\" data-slide=\"prev\">\r\n    <span class=\"carousel-control-prev-icon\" aria-hidden=\"true\"></span>\r\n    <span class=\"sr-only\">Previous</span>\r\n  </a>\r\n  <a class=\"carousel-control-next\" href=\"#carousel-example-2\" role=\"button\" data-slide=\"next\">\r\n    <span class=\"carousel-control-next-icon\" aria-hidden=\"true\"></span>\r\n    <span class=\"sr-only\">Next</span>\r\n  </a>\r\n  <!--/.Controls-->\r\n</div>\r\n<!--/.Carousel Wrapper-->\r\n      <br>\r\n <!--Section: Products v.3-->\r\n      <section>\r\n\r\n        <div class=\"row wow fadeIn\">\r\n{% for item in object_list %}\r\n          <div class=\"col-lg-3 col-md-6 mb-4\">\r\n<!-- Card -->\r\n<div class=\"card\">\r\n\r\n  <!-- Card image -->\r\n  <div class=\"view overlay\">\r\n    <img class=\"card-img-top\" src=\"{{ item.image.url }}\">\r\n    <a>\r\n      <div class=\"mask rgba-white-slight\"></div>\r\n    </a>\r\n  </div>\r\n\r\n  <!-- Card content -->\r\n  <div class=\"card-body\">\r\n\r\n    <!-- Title -->\r\n    <h6 class=\"card-title\">{{ item.title }}</h6>\r\n    <strong> <p class=\"bq-title\">Rs.{{ item.price|floatformat:\"0\" }} / Night</p> </strong>\r\n    <hr>\r\n    <!-- Text -->\r\n    <p class=\"card-text\">Description</p>\r\n\r\n  </div>\r\n\r\n  <!-- Card footer -->\r\n  <div class=\"rounded-bottom mdb-color lighten-3 text-center pt-3\">\r\n    <ul class=\"list-unstyled list-inline font-small\">\r\n      <li class=\"list-inline-item pr-2 white-text\"><i class=\"fas fa-hotel\"></i>{{ item.get_category_display }}</li>\r\n      <li class=\"list-inline-item pr-2\"><a href=\"#\" class=\"white-text\"><i\r\n            class=\"far fa-comments pr-1\"></i>0</a></li>\r\n    </ul>\r\n  </div>\r\n\r\n</div>\r\n<!-- Card -->\r\n\r\n\r\n\r\n          </div>\r\n          {% endfor %}\r\n<!-- Card -->\r\n        </div>\r\n\r\n      </section>\r\n      <!--Section: Products v.3-->\r\n\r\n      <!--Pagination-->\r\n\r\n      {% if is_paginated %}\r\n      <nav class=\"d-flex justify-content-center wow fadeIn\">\r\n        <ul class=\"pagination pg-blue\">\r\n\r\n          {% if page_obj.has_previous %}\r\n          <li class=\"page-item\">\r\n            <a class=\"page-link\" href=\"?page={{ page_obj.previous_page_number }}\" aria-label=\"Previous\">\r\n              <span aria-hidden=\"true\">&laquo;</span>\r\n              <span class=\"sr-only\">Previous</span>\r\n            </a>\r\n          </li>\r\n          {% endif %}\r\n\r\n          <li class=\"page-item active\">\r\n            <a class=\"page-link\" href=\"?page={{ page_obj.number }}\">{{ page_obj.number }}\r\n              <span class=\"sr-only\">(current)</span>\r\n            </a>\r\n          </li>\r\n\r\n          {% if page_obj.has_next %}\r\n          <li class=\"page-item\">\r\n            <a class=\"page-link\" href=\"?page={{ page_obj.next_page_number }}\" aria-label=\"Next\">\r\n              <span aria-hidden=\"true\">&raquo;</span>\r\n              <span class=\"sr-only\">Next</span>\r\n            </a>\r\n          </li>\r\n          {% endif %}\r\n        </ul>\r\n      </nav>\r\n      {% endif %}\r\n\r\n    </div>\r\n  </main>\r\n\r\n{% endblock content %}\r\n\r\n\r\n{% block extra_scripts %}\r\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.12.0/jquery.min.js\"> </script>\r\n<link rel=\"stylesheet\" href=\"https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.4/themes/smoothness/jquery-ui.css\">\r\n<script src=\"https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.4/jquery-ui.min.js\"></script>\r\n<script>\r\n\r\n  $(function() {\r\n    $(\"#query\").autocomplete({\r\n      source: \"/search_auto/\",\r\n      select: function (event, ui) { //item selected\r\n        AutoCompleteSelectHandler(event, ui)\r\n      },\r\n      minLength: 2,\r\n    });\r\n  });\r\n\r\n  function AutoCompleteSelectHandler(event, ui)\r\n  {\r\n    var selectedObj = ui.item;\r\n  }\r\n\r\n</script>\r\n\r\n\r\n{% endblock extra_scripts %}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- templates/home.html	(revision b78eb8fdb8c7921bb4816225341ed32314fba6f6)
+++ templates/home.html	(date 1607436731908)
@@ -104,7 +104,7 @@
   <!-- Card footer -->
   <div class="rounded-bottom mdb-color lighten-3 text-center pt-3">
     <ul class="list-unstyled list-inline font-small">
-      <li class="list-inline-item pr-2 white-text"><i class="fas fa-hotel"></i>{{ item.get_category_display }}</li>
+      <li class="list-inline-item pr-2 white-text"><i class="fas fa-hotel"></i> {{ item.get_category_display }}</li>
       <li class="list-inline-item pr-2"><a href="#" class="white-text"><i
             class="far fa-comments pr-1"></i>0</a></li>
     </ul>
Index: core/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import random\r\nimport string\r\nimport itertools\r\nimport functools\r\nimport stripe\r\nfrom django.conf import settings\r\nfrom django.contrib import messages\r\nfrom django.contrib.auth.decorators import login_required\r\nfrom django.contrib.auth.mixins import LoginRequiredMixin\r\nfrom django.core.exceptions import ObjectDoesNotExist\r\nfrom django.http import HttpResponseRedirect, HttpResponse\r\nfrom django.shortcuts import redirect\r\nfrom django.shortcuts import render, get_object_or_404\r\nfrom django.utils import timezone\r\nfrom django.views.generic import ListView, DetailView, View\r\nimport json\r\nfrom .forms import CheckoutForm, CouponForm, RefundForm, PaymentForm, CommentForm, SearchForm, AddressForm\r\nfrom django.db.models import Q\r\nfrom .models import Item, OrderItem, Order, Address, Payment, Coupon, Refund, Wishlist, Comment\r\nfrom django.contrib.auth.models import User\r\nstripe.api_key = settings.STRIPE_SECRET_KEY\r\n\r\n\r\n\r\n\r\ndef search_auto(request):\r\n  if request.is_ajax():\r\n    q = request.GET.get('term', '')\r\n    places = Item.objects.filter(title__icontains=q)\r\n    results = []\r\n    for pl in places:\r\n      place_json = {}\r\n      place_json = pl.title\r\n      results.append(place_json)\r\n    data = json.dumps(results)\r\n  else:\r\n    data = 'fail'\r\n  mimetype = 'application/json'\r\n  return HttpResponse(data, mimetype)\r\n\r\ndef create_ref_code():\r\n    return ''.join(random.choices(string.ascii_lowercase + string.digits, k=20))\r\n\r\ndef HomeView_Search(request):\r\n    if request.method == 'POST': # check post\r\n        form = SearchForm(request.POST)\r\n        if form.is_valid():\r\n            query = form.cleaned_data['query'] # get form input data\r\n            items = Item.objects.filter(Q(title__icontains=query)|Q(description__icontains=query))\r\n\r\n            context = {'items': items, 'query':query,\r\n                       }\r\n            return render(request, 'search_products.html', context)\r\n\r\n        return HttpResponseRedirect('/')\r\n\r\ndef HomeView_Category(request,category,gender):\r\n    items = Item.objects.filter(category=category,gender=gender)\r\n    c_d = items[0]\r\n\r\n    context = {'items': items, 'category':category, 'c_d': c_d\r\n               }\r\n    return render(request, 'home_category.html', context)\r\n\r\n\r\ndef products(request):\r\n\r\n    context = {\r\n        'items': Item.objects.all()\r\n    }\r\n    return render(request, \"products.html\", context)\r\n\r\ndef edituser(request):\r\n    url = request.META.get('HTTP_REFERER')\r\n    if request.method == 'POST':\r\n        dn = request.POST[\"uname\"]\r\n        fn=request.POST[\"fname\"]\r\n        ln = request.POST[\"lname\"]\r\n        usr=User.objects.get(id=request.user.id)\r\n        usr.username = dn\r\n        usr.first_name = fn\r\n        usr.last_name = ln\r\n        usr.save()\r\n    return HttpResponseRedirect(url)\r\n\r\ndef editaddress(request,id):\r\n    url = request.META.get('HTTP_REFERER')\r\n    if request.method == 'POST':\r\n        a = request.POST[\"st\"]\r\n        b=request.POST[\"ap\"]\r\n        c = request.POST[\"country\"]\r\n        d = request.POST[\"shipping_zip\"]\r\n        usr=Address.objects.get(id=id)\r\n        usr.street_address = a\r\n        usr.apartment_address = b\r\n        usr.country = c\r\n        usr.zip = d\r\n        usr.save()\r\n    return HttpResponseRedirect(url)\r\n\r\n\r\ndef addcomment(request, id):\r\n   url = request.META.get('HTTP_REFERER')  # get last url\r\n   #return HttpResponse(url)\r\n   if request.method == 'POST':  # check post\r\n      form = CommentForm(request.POST)\r\n      if form.is_valid():\r\n         data = Comment()  # create relation with model\r\n         data.subject = form.cleaned_data['subject']\r\n         data.comment = form.cleaned_data['comment']\r\n         data.rate = form.cleaned_data['rate']\r\n         data.product_id=id\r\n         current_user= request.user\r\n         data.user_id=current_user.id\r\n         data.save()  # save data to table\r\n         messages.success(request, \"Your review has ben sent. Thank you for your interest.\")\r\n         return HttpResponseRedirect(url)\r\n      else:\r\n          messages.warning(request, \"Please fill required feilds\")\r\n          return HttpResponseRedirect(url)\r\n\r\n   return HttpResponseRedirect(url)\r\n\r\n\r\n\r\nclass order_history(LoginRequiredMixin, View):\r\n    def get(self, *args, **kwargs):\r\n        model = Item\r\n        try:\r\n            order = Order.objects.filter(user=self.request.user, ordered=True)\r\n            addresses = Address.objects.filter(user=self.request.user,address_type=\"S\")\r\n\r\n            form = AddressForm()\r\n            context = {\r\n                'form': form,\r\n                'object': order,\r\n                'model': model,\r\n                'addresses': addresses,\r\n                'iterator': functools.partial(next, itertools.count())\r\n            }\r\n            return render(self.request, 'order_history.html', context)\r\n        except ObjectDoesNotExist:\r\n            messages.warning(self.request, \"You do not have any item on Wishlist\")\r\n            return redirect(\"/\")\r\n\r\n\r\ndef is_valid_form(values):\r\n    valid = True\r\n    for field in values:\r\n        if field == '':\r\n            valid = False\r\n    return valid\r\n\r\n\r\nclass CheckoutView(View):\r\n    def get(self, *args, **kwargs):\r\n        try:\r\n            order = Order.objects.get(user=self.request.user, ordered=False)\r\n            form = CheckoutForm()\r\n            context = {\r\n                'form': form,\r\n                'couponform': CouponForm(),\r\n                'order': order,\r\n                'DISPLAY_COUPON_FORM': True\r\n            }\r\n\r\n            shipping_address_qs = Address.objects.filter(\r\n                user=self.request.user,\r\n                address_type='S',\r\n                default=True\r\n            )\r\n            if shipping_address_qs.exists():\r\n                context.update(\r\n                    {'default_shipping_address': shipping_address_qs.last()})\r\n\r\n            billing_address_qs = Address.objects.filter(\r\n                user=self.request.user,\r\n                address_type='B',\r\n                default=True\r\n            )\r\n            if billing_address_qs.exists():\r\n                context.update(\r\n                    {'default_billing_address': billing_address_qs.last()})\r\n            return render(self.request, \"checkout.html\", context)\r\n        except ObjectDoesNotExist:\r\n            messages.info(self.request, \"You do not have an active order\")\r\n            return redirect(\"core:checkout\")\r\n\r\n    def post(self, *args, **kwargs):\r\n        form = CheckoutForm(self.request.POST or None)\r\n        try:\r\n            order = Order.objects.get(user=self.request.user, ordered=False)\r\n            if form.is_valid():\r\n\r\n                use_default_shipping = form.cleaned_data.get(\r\n                    'use_default_shipping')\r\n                if use_default_shipping:\r\n                    print(\"Using the defualt shipping address\")\r\n                    address_qs = Address.objects.filter(\r\n                        user=self.request.user,\r\n                        address_type='S',\r\n                        default=True\r\n                    )\r\n                    if address_qs.exists():\r\n                        shipping_address = address_qs[0]\r\n                        order.shipping_address = shipping_address\r\n                        order.save()\r\n                    else:\r\n                        messages.info(\r\n                            self.request, \"No default shipping address available\")\r\n                        return redirect('core:checkout')\r\n                else:\r\n                    print(\"User is entering a new shipping address\")\r\n                    shipping_address1 = form.cleaned_data.get(\r\n                        'shipping_address')\r\n                    shipping_address2 = form.cleaned_data.get(\r\n                        'shipping_address2')\r\n                    shipping_country = form.cleaned_data.get(\r\n                        'shipping_country')\r\n                    shipping_zip = form.cleaned_data.get('shipping_zip')\r\n\r\n                    if is_valid_form([shipping_address1, shipping_country, shipping_zip]):\r\n                        shipping_address = Address(\r\n                            user=self.request.user,\r\n                            street_address=shipping_address1,\r\n                            apartment_address=shipping_address2,\r\n                            country=shipping_country,\r\n                            zip=shipping_zip,\r\n                            address_type='S'\r\n                        )\r\n                        shipping_address.save()\r\n\r\n                        order.shipping_address = shipping_address\r\n                        order.save()\r\n\r\n                        set_default_shipping = form.cleaned_data.get(\r\n                            'set_default_shipping')\r\n                        if set_default_shipping:\r\n                            shipping_address.default = True\r\n                            shipping_address.save()\r\n\r\n                    else:\r\n                        messages.info(\r\n                            self.request, \"Please fill in the required shipping address fields\")\r\n                        return redirect('core:checkout')\r\n\r\n                use_default_billing = form.cleaned_data.get(\r\n                    'use_default_billing')\r\n                same_billing_address = form.cleaned_data.get(\r\n                    'same_billing_address')\r\n\r\n                if same_billing_address:\r\n                    billing_address = shipping_address\r\n                    billing_address.pk = None\r\n                    billing_address.save()\r\n                    billing_address.address_type = 'B'\r\n                    billing_address.save()\r\n                    order.billing_address = billing_address\r\n                    order.save()\r\n\r\n                elif use_default_billing:\r\n                    print(\"Using the defualt billing address\")\r\n                    address_qs = Address.objects.filter(\r\n                        user=self.request.user,\r\n                        address_type='B',\r\n                        default=True\r\n                    )\r\n                    if address_qs.exists():\r\n                        billing_address = address_qs[0]\r\n                        order.billing_address = billing_address\r\n                        order.save()\r\n                    else:\r\n                        messages.info(\r\n                            self.request, \"No default billing address available\")\r\n                        return redirect('core:checkout')\r\n                else:\r\n                    print(\"User is entering a new billing address\")\r\n                    billing_address1 = form.cleaned_data.get(\r\n                        'billing_address')\r\n                    billing_address2 = form.cleaned_data.get(\r\n                        'billing_address2')\r\n                    billing_country = form.cleaned_data.get(\r\n                        'billing_country')\r\n                    billing_zip = form.cleaned_data.get('billing_zip')\r\n\r\n                    if is_valid_form([billing_address1, billing_country, billing_zip]):\r\n                        billing_address = Address(\r\n                            user=self.request.user,\r\n                            street_address=billing_address1,\r\n                            apartment_address=billing_address2,\r\n                            country=billing_country,\r\n                            zip=billing_zip,\r\n                            address_type='B'\r\n                        )\r\n                        billing_address.save()\r\n\r\n                        order.billing_address = billing_address\r\n                        order.save()\r\n\r\n                        set_default_billing = form.cleaned_data.get(\r\n                            'set_default_billing')\r\n                        if set_default_billing:\r\n                            billing_address.default = True\r\n                            billing_address.save()\r\n\r\n                    else:\r\n                        messages.info(\r\n                            self.request, \"Please fill in the required billing address fields\")\r\n                        return redirect('core:checkout')\r\n\r\n                payment_option = form.cleaned_data.get('payment_option')\r\n\r\n                if payment_option == 'S':\r\n                    return redirect('core:payment', payment_option='stripe')\r\n                elif payment_option == 'P':\r\n                    return redirect('core:payment', payment_option='paypal')\r\n                else:\r\n                    messages.warning(\r\n                        self.request, \"Invalid payment option selected\")\r\n                    return redirect('core:checkout')\r\n        except ObjectDoesNotExist:\r\n            messages.warning(self.request, \"You do not have an active order\")\r\n            return redirect(\"core:order-summary\")\r\n\r\n\r\nclass PaymentView(View):\r\n    def get(self, *args, **kwargs):\r\n        order = Order.objects.get(user=self.request.user, ordered=False)\r\n        # create the payment\r\n        payment = Payment()\r\n        payment.user = self.request.user\r\n        payment.amount = order.get_total()\r\n        payment.save()\r\n\r\n        # assign the payment to the order\r\n\r\n        order_items = order.items.all()\r\n        order_items.update(ordered=True)\r\n        for item in order_items:\r\n            item.save()\r\n\r\n        order.ordered = True\r\n        order.payment = payment\r\n        order.ref_code = create_ref_code()\r\n        order.save()\r\n\r\n        messages.success(self.request, \"Your order was successful!\")\r\n        return redirect(\"/\")\r\n\r\n    # def get(self, *args, **kwargs):\r\n    #     order = Order.objects.get(user=self.request.user, ordered=False)\r\n    #     if order.billing_address:\r\n    #         context = {\r\n    #             'order': order,\r\n    #             'DISPLAY_COUPON_FORM': False,\r\n    #             'STRIPE_PUBLIC_KEY' : settings.STRIPE_PUBLIC_KEY\r\n    #         }\r\n    #         userprofile = self.request.user.userprofile\r\n    #         if userprofile.one_click_purchasing:\r\n    #             # fetch the users card list\r\n    #             cards = stripe.Customer.list_sources(\r\n    #                 userprofile.stripe_customer_id,\r\n    #                 limit=3,\r\n    #                 object='card'\r\n    #             )\r\n    #             card_list = cards['data']\r\n    #             if len(card_list) > 0:\r\n    #                 # update the context with the default card\r\n    #                 context.update({\r\n    #                     'card': card_list[0]\r\n    #                 })\r\n    #         return render(self.request, \"payment.html\", context)\r\n    #     else:\r\n    #         messages.warning(\r\n    #             self.request, \"You have not added a billing address\")\r\n    #         return redirect(\"core:checkout\")\r\n    #\r\n    # def post(self, *args, **kwargs):\r\n    #     order = Order.objects.get(user=self.request.user, ordered=False)\r\n    #     form = PaymentForm(self.request.POST)\r\n    #     userprofile = UserProfile.objects.get(user=self.request.user)\r\n    #     if form.is_valid():\r\n    #         token = form.cleaned_data.get('stripeToken')\r\n    #         save = form.cleaned_data.get('save')\r\n    #         use_default = form.cleaned_data.get('use_default')\r\n    #\r\n    #         if save:\r\n    #             if userprofile.stripe_customer_id != '' and userprofile.stripe_customer_id is not None:\r\n    #                 customer = stripe.Customer.retrieve(\r\n    #                     userprofile.stripe_customer_id)\r\n    #                 customer.sources.create(source=token)\r\n    #\r\n    #             else:\r\n    #                 customer = stripe.Customer.create(\r\n    #                     email=self.request.user.email,\r\n    #                 )\r\n    #                 customer.sources.create(source=token)\r\n    #                 userprofile.stripe_customer_id = customer['id']\r\n    #                 userprofile.one_click_purchasing = True\r\n    #                 userprofile.save()\r\n    #\r\n    #         amount = int(order.get_total() * 100)\r\n    #\r\n    #         try:\r\n    #\r\n    #             if use_default or save:\r\n    #                 # charge the customer because we cannot charge the token more than once\r\n    #                 charge = stripe.Charge.create(\r\n    #                     amount=amount,  # cents\r\n    #                     currency=\"usd\",\r\n    #                     customer=userprofile.stripe_customer_id\r\n    #                 )\r\n    #             else:\r\n    #                 # charge once off on the token\r\n    #                 charge = stripe.Charge.create(\r\n    #                     amount=amount,  # cents\r\n    #                     currency=\"usd\",\r\n    #                     source=token\r\n    #                 )\r\n    #\r\n    #             # create the payment\r\n    #             payment = Payment()\r\n    #             payment.stripe_charge_id = charge['id']\r\n    #             payment.user = self.request.user\r\n    #             payment.amount = order.get_total()\r\n    #             payment.save()\r\n    #\r\n    #             # assign the payment to the order\r\n    #\r\n    #             order_items = order.items.all()\r\n    #             order_items.update(ordered=True)\r\n    #             for item in order_items:\r\n    #                 item.save()\r\n    #\r\n    #             order.ordered = True\r\n    #             order.payment = payment\r\n    #             order.ref_code = create_ref_code()\r\n    #             order.save()\r\n    #\r\n    #             messages.success(self.request, \"Your order was successful!\")\r\n    #             return redirect(\"/\")\r\n    #\r\n    #         except stripe.error.CardError as e:\r\n    #             body = e.json_body\r\n    #             err = body.get('error', {})\r\n    #             messages.warning(self.request, f\"{err.get('message')}\")\r\n    #             return redirect(\"/\")\r\n    #\r\n    #         except stripe.error.RateLimitError as e:\r\n    #             # Too many requests made to the API too quickly\r\n    #             messages.warning(self.request, \"Rate limit error\")\r\n    #             return redirect(\"/\")\r\n    #\r\n    #         except stripe.error.InvalidRequestError as e:\r\n    #             # Invalid parameters were supplied to Stripe's API\r\n    #             print(e)\r\n    #             messages.warning(self.request, \"Invalid parameters\")\r\n    #             return redirect(\"/\")\r\n    #\r\n    #         except stripe.error.AuthenticationError as e:\r\n    #             # Authentication with Stripe's API failed\r\n    #             # (maybe you changed API keys recently)\r\n    #             messages.warning(self.request, \"Not authenticated\")\r\n    #             return redirect(\"/\")\r\n    #\r\n    #         except stripe.error.APIConnectionError as e:\r\n    #             # Network communication with Stripe failed\r\n    #             messages.warning(self.request, \"Network error\")\r\n    #             return redirect(\"/\")\r\n    #\r\n    #         except stripe.error.StripeError as e:\r\n    #             # Display a very generic error to the user, and maybe send\r\n    #             # yourself an email\r\n    #             messages.warning(\r\n    #                 self.request, \"Something went wrong. You were not charged. Please try again.\")\r\n    #             return redirect(\"/\")\r\n    #\r\n    #         except Exception as e:\r\n    #             # send an email to ourselves\r\n    #             messages.warning(\r\n    #                 self.request, \"A serious error occurred. We have been notifed.\")\r\n    #             return redirect(\"/\")\r\n    #\r\n    #     messages.warning(self.request, \"Invalid data received\")\r\n    #     return redirect(\"/payment/stripe/\")\r\n\r\n\r\nclass HomeView(ListView):\r\n    model = Item\r\n    paginate_by = 12\r\n    template_name = \"home.html\"\r\n\r\n\r\nclass OrderSummaryView(LoginRequiredMixin, View):\r\n    def get(self, *args, **kwargs):\r\n        try:\r\n            order = Order.objects.get(user=self.request.user, ordered=False)\r\n            context = {\r\n                'object': order\r\n            }\r\n            return render(self.request, 'order_summary.html', context)\r\n        except ObjectDoesNotExist:\r\n            messages.warning(self.request, \"You do not have an active order\")\r\n            return redirect(\"/\")\r\n\r\nclass WishlistView(LoginRequiredMixin, View):\r\n    def get(self, *args, **kwargs):\r\n        model = Item\r\n        try:\r\n            order = Wishlist.objects.filter(user=self.request.user)\r\n\r\n            context = {\r\n                'object': order,\r\n                'model': model\r\n            }\r\n            return render(self.request, 'wishlist.html', context)\r\n        except ObjectDoesNotExist:\r\n            messages.warning(self.request, \"You do not have any item on Wishlist\")\r\n            return redirect(\"/\")\r\n\r\n\r\n\r\ndef ItemDetailView(request,slug):\r\n    item = get_object_or_404(Item, slug=slug)\r\n    comments = Comment.objects.filter(product__slug=item.slug)\r\n    context = {\r\n        'item' : item,\r\n        'comments':comments\r\n\r\n    }\r\n    return render(request,'product.html',context)\r\n\r\n\r\n@login_required\r\ndef add_to_cart(request, slug):\r\n    item = get_object_or_404(Item, slug=slug)\r\n    order_item, created = OrderItem.objects.get_or_create(\r\n        item=item,\r\n        user=request.user,\r\n        ordered=False\r\n    )\r\n    order_qs = Order.objects.filter(user=request.user, ordered=False)\r\n    if order_qs.exists():\r\n        order = order_qs[0]\r\n        # check if the order item is in the order\r\n        if order.items.filter(item__slug=item.slug).exists():\r\n            order_item.quantity += 1\r\n            order_item.save()\r\n            messages.info(request, \"This item quantity was updated.\")\r\n            return redirect(\"core:order-summary\")\r\n        else:\r\n            order.items.add(order_item)\r\n            messages.info(request, \"This item was added to your cart.\")\r\n            return redirect(\"core:order-summary\")\r\n    else:\r\n        ordered_date = timezone.now()\r\n        order = Order.objects.create(\r\n            user=request.user, ordered_date=ordered_date)\r\n        order.items.add(order_item)\r\n        messages.info(request, \"This item was added to your cart.\")\r\n        return redirect(\"core:order-summary\")\r\n\r\n@login_required\r\ndef move_to_wishlist(request, slug):\r\n    item = get_object_or_404(Item, slug=slug)\r\n    order_item = Wishlist.objects.get_or_create(\r\n        item=item,\r\n        user=request.user,\r\n\r\n    )\r\n    messages.info(request, \"This item was added to your Wishlist.\")\r\n    item = get_object_or_404(Item, slug=slug)\r\n    order_qs = Order.objects.filter(\r\n        user=request.user,\r\n        ordered=False\r\n    )\r\n    if order_qs.exists():\r\n        order = order_qs[0]\r\n        # check if the order item is in the order\r\n        if order.items.filter(item__slug=item.slug).exists():\r\n            order_item = OrderItem.objects.filter(\r\n                item=item,\r\n                user=request.user,\r\n                ordered=False\r\n            )[0]\r\n            order.items.remove(order_item)\r\n            order_item.delete()\r\n            messages.info(request, \"This item was removed from your cart.\")\r\n            return redirect(\"core:wishlist-summary\")\r\n        else:\r\n            messages.info(request, \"This item was not in your cart\")\r\n            return redirect(\"core:product\", slug=slug)\r\n    else:\r\n        messages.info(request, \"You do not have an active order\")\r\n        return redirect(\"core:product\", slug=slug)\r\n\r\n@login_required\r\ndef remove_from_cart(request, slug):\r\n    item = get_object_or_404(Item, slug=slug)\r\n    order_qs = Order.objects.filter(\r\n        user=request.user,\r\n        ordered=False\r\n    )\r\n    if order_qs.exists():\r\n        order = order_qs[0]\r\n        # check if the order item is in the order\r\n        if order.items.filter(item__slug=item.slug).exists():\r\n            order_item = OrderItem.objects.filter(\r\n                item=item,\r\n                user=request.user,\r\n                ordered=False\r\n            )[0]\r\n            order.items.remove(order_item)\r\n            order_item.delete()\r\n            messages.info(request, \"This item was removed from your cart.\")\r\n            return redirect(\"core:order-summary\")\r\n        else:\r\n            messages.info(request, \"This item was not in your cart\")\r\n            return redirect(\"core:product\", slug=slug)\r\n    else:\r\n        messages.info(request, \"You do not have an active order\")\r\n        return redirect(\"core:product\", slug=slug)\r\n\r\n\r\n@login_required\r\ndef remove_single_item_from_cart(request, slug):\r\n    item = get_object_or_404(Item, slug=slug)\r\n    order_qs = Order.objects.filter(\r\n        user=request.user,\r\n        ordered=False\r\n    )\r\n    if order_qs.exists():\r\n        order = order_qs[0]\r\n        # check if the order item is in the order\r\n        if order.items.filter(item__slug=item.slug).exists():\r\n            order_item = OrderItem.objects.filter(\r\n                item=item,\r\n                user=request.user,\r\n                ordered=False\r\n            )[0]\r\n            if order_item.quantity > 1:\r\n                order_item.quantity -= 1\r\n                order_item.save()\r\n            else:\r\n                order.items.remove(order_item)\r\n            messages.info(request, \"This item quantity was updated.\")\r\n            return redirect(\"core:order-summary\")\r\n        else:\r\n            messages.info(request, \"This item was not in your cart\")\r\n            return redirect(\"core:product\", slug=slug)\r\n    else:\r\n        messages.info(request, \"You do not have an active order\")\r\n        return redirect(\"core:product\", slug=slug)\r\n\r\n@login_required\r\ndef add_to_wishlist(request, slug):\r\n    item = get_object_or_404(Item, slug=slug)\r\n    order_item = Wishlist.objects.get_or_create(\r\n        item=item,\r\n        user=request.user,\r\n\r\n    )\r\n    messages.info(request, \"This item was added to your Wishlist.\")\r\n    return redirect(\"core:product\",slug=slug)\r\n    order_qs = Wishlist.objects.filter(user=request.user)\r\n    # if order_qs.exists():\r\n    #     order = order_qs[0]\r\n    #     # check if the order item is in the order\r\n    #     if order.item.filter(item__slug=item.slug).exists():\r\n    #        messages.info(request, \"This item is already in your Wishlist.\")\r\n    #        return redirect(\"core:order-summary\")\r\n    #     else:\r\n    #         order.item.add(order_item)\r\n    #         messages.info(request, \"This item was added to your Wishlist.\")\r\n    #\r\n\r\n@login_required\r\ndef remove_from_wishlist(request, slug):\r\n    item = get_object_or_404(Item, slug=slug)\r\n    order_qs = Wishlist.objects.filter(\r\n        user=request.user,item__slug=item.slug)\r\n\r\n    order_qs.delete()\r\n    messages.info(request, \"This item was removed from your Wishlist.\")\r\n    return redirect(\"core:wishlist-summary\")\r\n\r\n@login_required\r\ndef remove_address(request, id):\r\n    url = request.META.get('HTTP_REFERER')\r\n    address_qs = Address.objects.get(id=id)\r\n\r\n\r\n    address_qs.delete()\r\n\r\n    return HttpResponseRedirect(url)\r\n\r\n\r\ndef get_coupon(request, code):\r\n    try:\r\n        coupon = Coupon.objects.get(code=code)\r\n        return coupon\r\n    except ObjectDoesNotExist:\r\n        messages.info(request, \"This coupon does not exist\")\r\n        return redirect(\"core:checkout\")\r\n\r\n\r\nclass AddCouponView(View):\r\n    def post(self, *args, **kwargs):\r\n        form = CouponForm(self.request.POST or None)\r\n        if form.is_valid():\r\n            try:\r\n                code = form.cleaned_data.get('code')\r\n                order = Order.objects.get(\r\n                    user=self.request.user, ordered=False)\r\n                order.coupon = get_coupon(self.request, code)\r\n                order.save()\r\n                messages.success(self.request, \"Successfully added coupon\")\r\n                return redirect(\"core:checkout\")\r\n            except ObjectDoesNotExist:\r\n                messages.info(self.request, \"You do not have an active order\")\r\n                return redirect(\"core:checkout\")\r\n\r\n\r\nclass RequestRefundView(View):\r\n    def get(self, *args, **kwargs):\r\n        form = RefundForm()\r\n        context = {\r\n            'form': form\r\n        }\r\n        return render(self.request, \"request_refund.html\", context)\r\n\r\n    def post(self, *args, **kwargs):\r\n        form = RefundForm(self.request.POST)\r\n        if form.is_valid():\r\n            ref_code = form.cleaned_data.get('ref_code')\r\n            message = form.cleaned_data.get('message')\r\n            email = form.cleaned_data.get('email')\r\n            # edit the order\r\n            try:\r\n                order = Order.objects.get(ref_code=ref_code)\r\n                order.refund_requested = True\r\n                order.save()\r\n\r\n                # store the refund\r\n                refund = Refund()\r\n                refund.order = order\r\n                refund.reason = message\r\n                refund.email = email\r\n                refund.save()\r\n\r\n                messages.info(self.request, \"Your request was received.\")\r\n                return redirect(\"core:request-refund\")\r\n\r\n            except ObjectDoesNotExist:\r\n                messages.info(self.request, \"This order does not exist.\")\r\n                return redirect(\"core:request-refund\")\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- core/views.py	(revision b78eb8fdb8c7921bb4816225341ed32314fba6f6)
+++ core/views.py	(date 1607436559107)
@@ -2,7 +2,6 @@
 import string
 import itertools
 import functools
-import stripe
 from django.conf import settings
 from django.contrib import messages
 from django.contrib.auth.decorators import login_required
@@ -18,7 +17,7 @@
 from django.db.models import Q
 from .models import Item, OrderItem, Order, Address, Payment, Coupon, Refund, Wishlist, Comment
 from django.contrib.auth.models import User
-stripe.api_key = settings.STRIPE_SECRET_KEY
+
 
 
 
